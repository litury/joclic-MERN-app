// File: WelcomePage.tsx

import {useEffect, useState} from 'react';
import {
    Accordion,
    Cell,
    Skeleton,
    Spinner,
    Divider,
    Placeholder,
    Button,
} from '@telegram-apps/telegram-ui';
import {ResumeCard} from './ResumeCard/ResumeCard.tsx';
import {useInitData, useBackButton} from "@tma.js/sdk-react";
import './WelcomePage.css'
import {Link} from "@/components/Link/Link.tsx";

type Vacancy = {
    [key: string]: string; // –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ vacancies –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–±—ä–µ–∫—Ç —Å –æ–¥–Ω–æ–π –ø–∞—Ä–æ–π –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
};

type ResumeData = {
    title: string;
    applies: number;
    vacancies: Vacancy[];
};

type Resume = {
    [key: string]: ResumeData; // –û–±—ä–µ–∫—Ç resumes —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ ID —Ä–µ–∑—é–º–µ, –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ ResumeData
};

const WelcomePage = () => {
    const initData = useInitData();
    const backButton = useBackButton();
    const telegram_id = initData?.user?.id
    const [resumes, setResumes] = useState<Resume>({});
    const [isLoading, setIsLoading] = useState(true);
    const [expanded, setExpanded] = useState(false);
    const handleAccordionChange = () => {
        setExpanded(!expanded);
    };

    useEffect(() => {
        const fetchApply = async () => {
            const response = await fetch('https://2537546-ps47079.twc1.net/free-apply', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ telegram_id: telegram_id }),
            });
            const data = await response.json();
            console.log(data);
            setResumes(data);
            setIsLoading(false);
        };

        fetchApply();

    }, [telegram_id]);

    useEffect(() => {
        backButton.hide();

        return () => {
            backButton.show();
        }
    }, [])

    useEffect(() => {
        console.log(resumes);
    }, [resumes]);

    const totalApplies = Object.values(resumes).reduce((acc, curr) => acc + curr.applies, 0);

    if (isLoading) {
        return (
            <>
                <Skeleton className="skeleton">
                <Placeholder
                    description={
                        <Spinner size="m"/>}
                    header="–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ... üìä"
                >

                </Placeholder>
                </Skeleton>
                <Divider/>
                <Skeleton className="skeleton">
                    <Accordion expanded={expanded} onChange={handleAccordionChange}>
                        <Accordion.Summary
                            description={
                                <div style={{display: "flex", alignItems: "center"}}>
                                    <span style={{paddingRight: '8px'}}>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: </span>
                                    <Spinner size="s"/>
                                </div>

                            }
                        >
                            –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—é–º–µ...
                        </Accordion.Summary>
                        <Accordion.Content>


                            <Cell className="skeleton">
                                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...
                            </Cell>


                        </Accordion.Content>
                    </Accordion>
                </Skeleton>

            </>
        );
    }

    return (
        <>
            <Placeholder
                description={
                    `–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª ${totalApplies} –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª –∏—Ö –≤ ${totalApplies} JOC –∫–æ–∏–Ω–æ–≤.
                
                `}
                header="–£—Å–ø–µ—à–Ω–æ! üéâ"
            >

            </Placeholder>

            {Object.entries(resumes).map(([resumeId, resumeData]) => (
                <>
                    <ResumeCard key={resumeId} resumeData={resumeData}/>
                    <Divider/>
                </>
            ))}

                <div style={{display: 'flex', justifyContent: 'center', marginTop: '16px'}}>
                    <Link to="/profile">
                        <Button size="l">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å</Button>
                    </Link>
                </div>


        </>
    );
};

export {WelcomePage};